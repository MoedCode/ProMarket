<%- include('partials/header') %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../public/css/style.css">
    <title>Task Manager</title>
    <meta charset="UTF-8">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .task-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            padding: 20px;
        }

        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 300px;
            padding: 15px;
            margin: 10px;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: scale(1.05);
        }

        .task-detail {
            margin-bottom: 10px;
            font-size: 16px;
        }

        .task-detail strong {
            color: #333;
        }

        h1, h2 {
            text-align: center;
            color: #333;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            width: 300px;
        }

        .modal-header {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .modal-body {
            display: flex;
            flex-direction: column;
        }

        .modal-footer {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
        }

        .modal-button {
            padding: 10px 20px;
            border: none;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }

        .modal-button.cancel {
            background-color: #dc3545;
        }
    </style>
</head>
<body>

<h1>Welcome to Your Tasker</h1>
<h2>Your Tasks:</h2>

<div class="task-container">
    <% tasks.forEach(function(task) { %>
        <div class="card">
            <h3>Task:</h3>
            <% Object.keys(task).forEach(function(key) { %>
                <div class="task-detail">
                    <strong><%= key %>:</strong> <%= task[key] %>
                </div>
            <% }); %>

            <!-- Delete Button -->
            <button class="delete-btn" data-id="<%= task.id %>">Delete Task</button>

            <!-- Update Button -->
            <button class="update-btn" data-id="<%= task.id %>" data-task="<%= task.task %>" data-kickoff="<%= task.kickoff %>" data-priority="<%= task.priority %>">Update Task</button>
        </div>
    <% }); %>
</div>

<!-- Confirmation Modal for Deletion -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Are you sure you want to delete this task?</h3>
        </div>
        <div class="modal-footer">
            <button id="confirmDelete" class="modal-button">Yes, Delete</button>
            <button id="cancelDelete" class="modal-button cancel">Cancel</button>
        </div>
    </div>
</div>

<!-- Update Task Modal -->
<div id="updateModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Update Task</h3>
        </div>
        <div class="modal-body">
            <label for="task">Task:</label>
            <input type="text" id="task" name="task">

            <label for="kickoff">Kickoff (DateTime):</label>
            <input type="datetime-local" id="kickoff" name="kickoff" disabled>

            <label for="priority">Priority:</label>
            <input type="number" id="priority" name="priority" min="1" max="5">
        </div>
        <div class="modal-footer">
            <button id="saveUpdate" class="modal-button">Save</button>
            <button id="cancelUpdate" class="modal-button cancel">Cancel</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const deleteBtns = document.querySelectorAll('.delete-btn');
        const updateBtns = document.querySelectorAll('.update-btn');
        const deleteModal = document.getElementById('deleteModal');
        const updateModal = document.getElementById('updateModal');
        let taskToDelete, taskToUpdate;
        // Delete Task
        deleteBtns.forEach(button => {
            button.addEventListener('click', function() {
                taskToDelete = this.getAttribute('data-id');
                deleteModal.style.display = 'flex';
            });
        });


        document.getElementById('confirmDelete').addEventListener('click', async function() {
            try {
                const token = getCookie('token'); // Get token from cookies7

                x  = {
                    headers: { Authorization: `Bearer ${token}` },
                    data: { task_id: taskToDelete }
                }
                await axios.delete('/delete', {
                    headers: { Authorization: `Bearer ${token}` },
                    data: { task_id: taskToDelete }
                });
                location.reload();
            } catch (error) {
                console.error('Error deleting task:', error);
            } finally {
                deleteModal.style.display = 'none';
            }
        });

        document.getElementById('cancelDelete').addEventListener('click', function() {
            deleteModal.style.display = 'none';
        });

        // Update Task
        updateBtns.forEach(button => {
            button.addEventListener('click', function() {
                taskToUpdate = {
                    id: this.getAttribute('data-id'),
                    task: this.getAttribute('data-task'),
                    kickoff: this.getAttribute('data-kickoff'),
                    priority: this.getAttribute('data-priority')
                };
                document.getElementById('task').value = taskToUpdate.task;
                document.getElementById('kickoff').value = taskToUpdate.kickoff;
                document.getElementById('priority').value = taskToUpdate.priority;
                updateModal.style.display = 'flex';
            });
        });

        document.getElementById('saveUpdate').addEventListener('click', async function() {
            try {
                const token = getCookie('token'); // Get token from cookies
                console.log('Cookies:', document.cookie);
                console.log('Token:', token);

                const updatedData = {
                    category: "tasks",
                    lock_for: { id: taskToUpdate.id },
                    update_data: {
                        task: document.getElementById('task').value,
                        kickoff: document.getElementById('kickoff').value,
                        priority: document.getElementById('priority').value
                    }
                };

                await axios.put('/update', updatedData, {
                    headers: { Authorization: `Bearer ${token}` },
                    withCredentials: true // Ensure cookies are sent
                });
                location.reload();
            } catch (error) {
                console.error('Error updating task:', error);
            } finally {
                updateModal.style.display = 'none';
            }
        });


        document.getElementById('cancelUpdate').addEventListener('click', function() {
            updateModal.style.display = 'none';
        });

        // Utility to get a cookie value by name
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }
    });
</script>

</body>
</html>
