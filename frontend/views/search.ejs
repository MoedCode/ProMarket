<%- include('partials/header') %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Page</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input, select, button {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .results {
            margin-top: 20px;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Search</h1>
    <div class="form-group">
        <label for="category">Category</label>
        <select id="category" onchange="updateAttributes()">
            <option value="tasks">Tasks</option>
        </select>
    </div>

    <div class="form-group">
        <label for="method">Method</label>
        <select id="method">
            <option value="startwith">Start With</option>
            <option value="include">Include</option>
            <option value="identical">Identical</option>
        </select>
    </div>

    <div class="form-group">
        <label for="attribute">Attribute</label>
        <select id="attribute" onchange="updateInputType()">
            <option value="task">Task</option>
            <option value="kickoff">Kickoff</option>
        </select>
    </div>

    <div class="form-group">
        <label for="value">Value</label>
        <input type="text" id="value">
    </div>

    <button onclick="performSearch()">Search</button>

    <div class="results" id="results"></div>
</div>
<button id="debugBtn">DEBUG</button>
<div id="debugOutput" style="display: none; border: 1px solid #ccc; padding: 10px; margin-top: 10px;">
    <h4>Request Debug Info</h4>
    <pre id="debugInfo"></pre>
</div>

<script>
    const defaultSearchURL = "http://127.0.0.1:5001/search/forward";

    function updateAttributes() {
        const category = document.getElementById("category").value;
        const attributeSelect = document.getElementById("attribute");

        if (category === "tasks") {
            attributeSelect.innerHTML = `
                <option value="task">Task</option>
                <option value="kickoff">Kickoff</option>
            `;
        }
    }

    function updateInputType() {
        const attribute = document.getElementById("attribute").value;
        const inputField = document.getElementById("value");

        if (attribute === "kickoff") {
            inputField.type = "datetime-local";
            inputField.placeholder = "Select a date and time";
        } else {
            inputField.type = "text";
            inputField.placeholder = "Enter a value";
        }
    }

    // Function to get a specific cookie by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    async function performSearch() {
        const searchBody = getRequestBody();
        const headers = getRequestHeaders();
        const resultsContainer = document.getElementById("results");

        try {
            const response = await axios.post(defaultSearchURL, searchBody, { headers });

            if (response.data.results) {
                resultsContainer.innerHTML = response.data.results
                    .map(result => `
                        <div>
                            <p><strong>Task:</strong> ${result.task}</p>
                            <p><strong>Kickoff:</strong> ${result.kickoff}</p>
                            <p><strong>Priority:</strong> ${result.priority}</p>
                        </div>
                        <hr>
                    `).join("");
            } else {
                resultsContainer.innerHTML = "<p class='error'>No matching rows found.</p>";
            }
        } catch (error) {
            resultsContainer.innerHTML = `<p class='error'>Error: ${error.response?.data?.error || "An error occurred"}</p>`;
        }
    }

    function getRequestBody() {
        const category = document.getElementById("category").value;
        const method = document.getElementById("method").value;
        const attribute = document.getElementById("attribute").value;
        const value = document.getElementById("value").value;

        return {
            category,
            method,
            query: {
                [attribute]: value,
                user_id: "f355aeb1-b656-4a02-927a-898b9119a4fc" // Example user_id
            }
        };
    }

    function getRequestHeaders() {
        const token = getCookie('token'); // Get token from cookies
        if (!token) {
            alert('Authorization token is missing!');
            throw new Error('Authorization token not found in cookies');
        }
        return {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json"
        };
    }

    // DEBUG Button Click Listener
    document.getElementById('debugBtn').addEventListener('click', () => {
        const debugOutput = document.getElementById('debugOutput');
        const debugInfo = document.getElementById('debugInfo');

        // Get dynamic request data
        const requestBody = getRequestBody();
        const requestHeaders = getRequestHeaders();

        // Format the Request Details
        const requestDetails = {
            url: defaultSearchURL, // Include the URL
            headers: requestHeaders,
            body: requestBody
        };

        // Display Debug Info
        debugInfo.textContent = JSON.stringify(requestDetails, null, 2);
        debugOutput.style.display = 'block';
    });
</script>
</body>
</html>
